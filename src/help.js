import { Markup } from 'telegraf'
import { createUser } from './db.js'

const functionGptMessage = [`*ChatGPT – это искусственный интеллект*, созданный компанией OpenAI на основе архитектуры Generative Pre-trained Transformer (GPT). *Вот основные способности и функции, которыми обладает ChatGPT:*

*1. Общение в режиме диалога:* 
ChatGPT может вести беседы на различные темы, поддерживая нить разговора и адаптируясь к контексту общения.

Предлагаем посмотреть видео-обзор возможностей ChatGPT на YouTube на канале ProTech
[Нажмите тут чтобы посмотреть видео \(Тайм код 4:17\)](https://youtu.be/VuHNlPy5_Qk?t=257)

Краткое текстовое описание возможностей читайте далее в этом разделе нажав кнопку вперед.
`,`*2. Генерация текстов:* 
Он может писать статьи, рассказы, поэзию, код и другие виды текстов, следуя определённым инструкциям и стилю.
`,`*3. Ответы на вопросы:* ChatGPT способен отвечать на вопросы, начиная от простых фактических запросов и заканчивая более сложными темами, требующими понимания контекста.
`,`*4. Изучение и объяснение концепций:* 
ИИ может изучать новые понятия и объяснять сложные идеи простым языком.
`,`*5. Улучшение обучения:* 
Модель может предложить упражнения, образовательные материалы и объяснения, помогая в обучении.
`,`*6. Помощь в программировании:* 
ChatGPT может помочь найти ошибки в коде, предложить способы оптимизации и дать советы по лучшим практикам программирования.
`,`*7. Развлечения:* 
Модель может участвовать в играх, создавать шутки, головоломки и другие формы развлечений.
`,`*8. Помощь в работе с текстом:* 
ChatGPT может предложить редактирование текстов, корректировку грамматики, стилистики и структуры текста.
`,`*9. Поддержка разнообразных языков:* 
GPT способен общаться на многих языках, что делает его полезным инструментом для международного общения и переводов.
`,`*10. Адаптация под пользовательские сценарии:* 
Благодаря машинному обучению, ChatGPT может адаптироваться под нужды и предпочтения конкретного пользователя, становясь более персонализированным инструментом общения и помощи.
`,`*Важно:*
Стоит отметить, что независимо от версии, все модели GPT имеют определённые ограничения и не всегда способны точно различать достоверную и недостоверную информацию, поэтому их ответы должны проверяться с критической точки зрения.`
]
const optionBotMessage = [`*Chat GPT4 Voice Bot*, — это инновационный Telegram-бот, обладающий мощными функциями голосового взаимодействия с Chat GPT. 
*Рассмотрим функции бота:*

*1. Меню бота:* 
Слева от строки ввода текста, расположено меню бота. Нажмите, чтобы увидеть меню. Перед вами основные команды бота.
`,`*2. Перезапуск бота:* 
Первым в списке меню вы видите пункт "Перезапустить бота". Если бот перестал отвечать на сообщения или работает некорректно, перезапуск может помочь устранить временные неполадки или застрявшие процессы. Часто проблемы такого характера кроются на стороне мессенджера Telegram.
`,`*3. Сброс контекста:* 
Контекст в ChatGPT относится к накопленной истории общения, на основании которой ChatGPT генерирует ответы. Сброс контекста может быть необходим, когда накопленные данные больше не актуальны, или для начала новой темы разговора, гарантируя, что старый контекст не повлияет на новый диалог.
`,`*4. Настройки бота:* 
В разделе настройки вы можете выбрать как бот будет отвечать вам. Бот может отвечать голосом и текстом. Если вы выбираете режим ответов голосом, то можете выбрать и сам голос из представленных.
`,`*5. Профиль:* 
В разделе профиль вы можете увидеть ваши данные которые видит бот, это нужно для учета подписки. Кроме того можете узнать срок действия вашей подписки, а также продлить ее.
`,`*6. Раздел Как пользоваться:* 
Это раздел в котором вы сейчас находитесь. К нему всегда можно вернуться если возникнуть проблемы с понимаем функционала бота или возможностей Chat GPT. Данный раздел регулярно обновляется.
`,`*7. Раздел подписка:* 
В данном разделе вы можете узнать о возможностях подписки и скидках. А также оплатить подписку.
`]

const helpMessage = `ℹ️ *Вы в разделе ПОМОЩЬ*
    
В этом разделе можно узнать о функциях бота и о способах взаимодействия с искусственным интеллектом Chat GPT 4 Turbo
Выберите интересующую Вас категорию:`

export const helpCommand = async (ctx) => {
    await createUser(ctx.from.id, ctx.from.first_name)
    await ctx.replyWithMarkdown(helpMessage, Markup.inlineKeyboard([
        [Markup.button.callback('Функции телеграм бота', 'helpBotPage:1')],
        [Markup.button.callback('Возможности Chat GPT 4 Turbo', 'helpGptPage:1')]
    ]))
}

export const helpGpt = async (ctx, page = 1, message) => {
    try {
        let totalCount
        let text

        if (message === 'helpBotPage') {
            totalCount = optionBotMessage.length
            text = optionBotMessage[page - 1]
        } else if (message === 'helpGptPage') {
            totalCount = functionGptMessage.length
            text = functionGptMessage[page - 1]
        } else {
            throw new Error('Неизвестный запрос')
        }

        const totalPages = Math.ceil(totalCount)
        const paginationKeyboard = []

        if (page > 1 && page < totalPages) {
            paginationKeyboard.push([
                {
                    text: '◀️ Назад',
                    callback_data: `${message}:${page - 1}`,
                },
                {
                    text: 'Вперед ▶️',
                    callback_data: `${message}:${page + 1}`,
                },
            ])
        } else if (page > 1) {
            paginationKeyboard.push([
                {
                    text: '◀️ Назад',
                    callback_data: `${message}:${page - 1}`,
                },
            ])
        } else if (page < totalPages) {
            paginationKeyboard.push([
                {
                    text: 'Вперед ▶️',
                    callback_data: `${message}:${page + 1}`,
                },
            ])
        }
        paginationKeyboard.push([
            {
                text: '⏪️ Назад в помощь',
                callback_data: `helpPanel`,
            },
        ])
        await ctx.editMessageText(`${text}\n\nСтраница ${page}/${totalPages}`,{
            parse_mode: 'Markdown',
            disable_web_page_preview: 'true'
        })
        await ctx.editMessageReplyMarkup({
            inline_keyboard: paginationKeyboard,
        })
    } catch (e) {
        console.error('Ошибка при показе текста: ', e.message)
    }
}