import {profilePromo, profileUser, promoRemove, subscribePay} from './db.js'
import { subscribeDay } from './utils.js'
import { Markup } from 'telegraf'
import { helpCommand, helpGpt } from './help.js'
import { handleAllUser, adminPanel, handleAllPromo } from './admin.js'

export const callbacks = async (ctx) => {
    const data = ctx.callbackQuery.data

    if (data.startsWith('info:')) {
        try {
            const userId = Number(data.split(':')[1])
            const page = data.split(':')[2]
            const user = await profileUser(userId)
            const subscribe = subscribeDay(user.subscribe)
            const addSubscribeKeyboard = Markup.inlineKeyboard([
                [
                    Markup.button.callback('+ 30 –¥–Ω–µ–π', `addSub:${user.telegramId}:${user.name}:30`),
                    Markup.button.callback('+ 90 –¥–Ω–µ–π', `addSub:${user.telegramId}:${user.name}:90`),
                    Markup.button.callback('+ 180 –¥–Ω–µ–π', `addSub:${user.telegramId}:${user.name}:180`)
                ],
                [
                    Markup.button.callback('‚óÄÔ∏è –ö —Å–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', `usersPage:${page}`)
                ],
                [
                    Markup.button.callback('‚è™Ô∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', `adminPanel`)
                ]
            ])
            const text = `*–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:*
            
*ID:* ${user.id}
*Telegram ID:* \`${user.telegramId}\`
*–ò–º—è:* ${user.name}
*–†–æ–ª—å:* ${user.role}
*–ü–æ–¥–ø–∏—Å–∫–∞:* ${subscribe}

–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É:`
            await ctx.deleteMessage()
            ctx.replyWithMarkdown(text, addSubscribeKeyboard)

        } catch (e) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ', e.message)
        }
    }

    if (data.startsWith('promoInfo:')) {
        try {
            const promoId = Number(data.split(':')[1])
            const page = data.split(':')[2]
            const promo = await profilePromo(promoId)
            const validity = subscribeDay(promo.validity)
            const addSubscribeKeyboard = Markup.inlineKeyboard([
                [
                    Markup.button.callback('‚ùå –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥', `promoRemove:${promo.id}`)

                ],
                [
                    Markup.button.callback('‚óÄÔ∏è –ö —Å–ø–∏—Å–∫—É –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤', `promoPage:${page}`)
                ],
                [
                    Markup.button.callback('‚è™Ô∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', `adminPanel`)
                ]
            ])
            const text = `*–ü—Ä–æ–º–æ–∫–æ–¥:*
            
*ID:* ${promo.id}
*–ö–æ–¥:* \`${promo.code}\`
*–¢–∏–ø:* ${promo.type}
*–ó–Ω–∞—á–µ–Ω–∏–µ:* ${promo.meaning}
*–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:* ${validity}
`
            await ctx.deleteMessage()
            ctx.replyWithMarkdown(text, addSubscribeKeyboard)

        } catch (e) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞: ', e.message)
        }
    }


    if (data.startsWith('addSub:')) {
        try {
            const id = data.split(':')[1]
            const name = data.split(':')[2]
            const day = data.split(':')[3]
            await subscribePay(id,name,day)
            await ctx.answerCbQuery('–ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ')

        } catch (e) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: ', e.message)
            await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏')
        }
    }

    if (data.startsWith('usersPage:')) {
        const page = parseInt(data.split(':')[1])
        await handleAllUser(ctx, page)
    }

    if (data.startsWith('promoPage:')) {
        const page = parseInt(data.split(':')[1])
        await handleAllPromo(ctx, page)
    }

    if (data.startsWith('promoRemove:')) {
        const id = parseInt(data.split(':')[1])
        const remove = await promoRemove(id)
        if (!remove) {
            await ctx.answerCbQuery('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫')
        } else {
            await ctx.answerCbQuery('–ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω')
        }
    }

    if (data.startsWith('adminPanel')) {
        await ctx.deleteMessage()
        await adminPanel(ctx)
    }

    if (data.startsWith('sendPayGood:')) {
        try {
            const idSend = data.split(':')[1]
            await ctx.telegram.sendMessage(idSend,`*–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–ª–µ–Ω–∞*
            
–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É –ø–æ–¥–ø–∏—Å–∫–∏\\.  
–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º`,
                {
                    parse_mode: "MarkdownV2",
                    reply_markup: {
                        inline_keyboard: [
                            [{
                                text: "üë§ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å",
                                callback_data: `profile`
                            }]
                        ]
                    }
                })
            await ctx.answerCbQuery('–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–ª–µ–Ω–∞.')
            await ctx.deleteMessage()
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ sendPayGood:', error)
            await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏.');
        }
    }

    if (data.startsWith('search')) {
        await ctx.scene.enter('sSearch')
    }

    if (data.startsWith('newPromo')) {
        await ctx.scene.enter('sNewPromo')
    }

    if (data.startsWith('helpBotPage:')) {
        const page = parseInt(data.split(':')[1])
        await helpGpt(ctx, page, 'helpBotPage')
    }

    if (data.startsWith('helpGptPage:')) {
        const page = parseInt(data.split(':')[1])
        await helpGpt(ctx, page, 'helpGptPage')
    }

    if (data.startsWith('helpPanel')) {
        await ctx.deleteMessage()
        await helpCommand(ctx)
    }


}