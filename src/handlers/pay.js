import config from 'config'
import { Markup } from 'telegraf'
import { subscribePay } from '../db.js'

const ytoken = config.get('Y_KASSA_TOKEN')
const price = config.get('ONE_PRICE')
const supportMessage = config.get('SUPPORT_MESSAGE')

const getInvoice = (id, phone) => {
    return {
        chat_id: id,
        title: '–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏',
        description: '–ü–æ–¥–ø–∏—Å–∫–∞ ChatGPT BOT ‚Äî 30 –¥–Ω–µ–π',
        payload: {
            date: new Date(),
            user_id: id,
            provider: '–Æ-–∫–∞—Å—Å–∞',
            bot: 'ChatGPT_Bot'
        },
        receipt: {
            customer: {
                phone: phone
            },
            items: [
                {
                    description: "–ü–æ–¥–ø–∏—Å–∫–∞ ChatGPT BOT ‚Äî 30 –¥–Ω–µ–π",
                    quantity: "1",
                    amount: {
                        value: `${price}.00`,
                        currency: "RUB"
                    },
                    vat_code: "1"
                },

            ]
        },
        provider_token: ytoken,
        start_parameter: 'pay',
        currency: 'RUB',
        prices: [{label: '‚ÇΩ', amount: price * 100}]
    }
}

export const handlePayGetPhone = async (ctx) => {
    await ctx.replyWithMarkdown(`*–ù–∞–ø–∏—à–∏—Ç–µ –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞*

–≠—Ç–æ –Ω—É–∂–Ω–æ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ —á—Ç–æ–±—ã –ø—Ä–∏—Å–ª–∞—Ç—å –≤–∞–º —á–µ–∫.
–ú—ã –Ω–∏–≥–¥–µ –Ω–µ —Ö—Ä–∞–Ω–∏–º –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ`, )
    await ctx.scene.enter('sPhone')
}

export const handlePay = async (ctx, phone) => {
    try {
        const invoice = getInvoice(ctx.from.id, phone)
        console.log(invoice)
        if (!invoice.provider_token) {
            throw new Error('–ù–µ —É–∫–∞–∑–∞–Ω provider_token')
        }
        return ctx.replyWithInvoice(invoice)
    } catch (e) {
        console.log(e.message)
        await ctx.reply(`–ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n` +
            '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –±–æ—Ç–∞')
        await ctx.reply(supportMessage)
    }
}

export const preCheckoutQuery = (ctx) => {
    ctx.answerPreCheckoutQuery(true)
}


export const successfulPayment = async (ctx) => {
    await subscribePay(ctx.from.id, ctx.from.first_name,30)
    await ctx.reply('–ü–æ–¥–ø–∏—Å–∫–∞ –æ–ø–ª–∞—á–µ–Ω–∞ ‚úÖ \n\n' +
        '–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –ø—Ä–æ—Ñ–∏–ª–µ',
        Markup.inlineKeyboard([Markup.button.callback(`üë§ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å`, 'profile')]))
}